{"version":3,"sources":["pages/admin/login/index.js","Router/index.js","requireLogin.js","App.js","serviceWorker.js","index.js","utils/loadable.js"],"names":["Login","props","handleSubmit","e","console","log","sessionStorage","setItem","history","push","state","loading","username","password","bind","className","id","config","style","width","borderRadius","onFinish","this","Item","name","rules","required","message","prefix","UserOutlined","color","placeholder","LockOutlined","block","type","htmlType","React","Component","routes","path","component","loadable","requireLogin","login","checkAuth","getItem","pathname","location","setState","App","exact","render","to","map","route","i","key","includes","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","loadingComponent","loader","Loadable"],"mappings":"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","file":"static/js/main.68fefeb8.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Form, Input, Button, Card, Message} from 'antd'\r\nimport './index.less'\r\nimport {UserOutlined, LockOutlined} from '@ant-design/icons'\r\nimport Particles from 'reactparticles.js'\r\n\r\n\r\nclass Login extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      loading: false,\r\n      username: '',\r\n      password: ''\r\n    }\r\n    this.handleSubmit = this.handleSubmit.bind(this)\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    // e.preventDefault()\r\n    console.log('登录成功')\r\n    sessionStorage.setItem('blogUser', '敏哥')\r\n    sessionStorage.setItem('menuItemKey', '0')\r\n    this.props.history.push('/web/index')\r\n  }\r\n  render () {\r\n    return (\r\n      <div className=\"login\">\r\n        <Particles id=\"particles1\" config=\"particles1.json\" />\r\n        <Card className=\"login-form\" style={{width:300, borderRadius:30}}>\r\n          <Form onFinish={this.handleSubmit}>\r\n            <Form.Item name=\"username\" rules={[{ required: true, message: '请输入用户名' }]}>\r\n              <Input prefix={<UserOutlined style={{color:'rgba(0,0,0,0.25)'}}/>} placeholder=\"请输入用户名\"/>\r\n            </Form.Item>\r\n            <Form.Item name=\"password\" rules={[{required: true, message: '请输入密码'}]}>\r\n              <Input prefix={<LockOutlined style={{color:'rgba(0,0,0,0.25)'}}/>} placeholder=\"请输入密码\"/>\r\n            </Form.Item>\r\n\r\n            <Button block type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">Login in</Button>\r\n\r\n          </Form>\r\n        </Card>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n// const Login = Form.create({name: 'normal_login'})(login)\r\n\r\nexport default Login","import loadable from '../utils/loadable'\r\n\r\nconst adminLayout = loadable(() => import('../pages/admin/layout'))\r\nconst webLayout = loadable(() => import('../pages/web/layout'))\r\n\r\nconst routes = [\r\n  {\r\n    path: '/admin',\r\n    component: adminLayout\r\n  },\r\n  {\r\n    path: '/web',\r\n    component: webLayout\r\n  }\r\n]\r\n\r\nexport default routes","import React from 'react'\r\n\r\nexport default function requireLogin (Component) {\r\n  // 组件又已经登录的模块，直接返回（防止重新渲染）\r\n  if (Component.requireLogin) {\r\n    return Component.requireLogin\r\n  }\r\n\r\n  // 创建验证组件\r\n  class requireLogin extends Component {\r\n    constructor (props) {\r\n      super(props)\r\n\r\n      this.state = {\r\n        login :true\r\n      }\r\n    }\r\n\r\n    componentWillMount () {\r\n      this.checkAuth()\r\n    }\r\n\r\n    componentWillReceiveProps () {\r\n      this.checkAuth()\r\n    }\r\n    checkAuth () {\r\n      // 判断登录\r\n      const login = sessionStorage.getItem('blogUser')\r\n      // 未登录 重定向去登录页面\r\n      const pathname = this.props.location.pathname !== '/login'\r\n\r\n      if (!login && pathname) {\r\n        this.props.history.push('/login')\r\n        return\r\n      }\r\n      this.setState({\r\n        login\r\n      })\r\n    }\r\n    render () {\r\n      if (this.state.login) {\r\n        return <Component {...this.props} />\r\n      }\r\n      return ''\r\n    }\r\n  }\r\n  Component.requireLogin = requireLogin\r\n  return Component.requireLogin\r\n}","import React, {Component} from 'react'\nimport {BrowserRouter as Router, Route, Link, Redirect} from 'react-router-dom'\nimport Login from './pages/admin/login'\nimport routes from './Router'\nimport requireLogin from './requireLogin'\n\nclass App extends Component {\n// Redirect 路由重定向\n  render () {\n    return (\n      <Router>\n        <div>\n          <Route exact path=\"/\" render={() => <Redirect to=\"/web/index\" />} />\n          <Route path=\"/login\" component={Login} />\n          {\n            routes.map((route, i) => (\n              <Route key={i} path={route.path} component={\n                route.path.includes('/admin') ? requireLogin(route.component) : route.component\n              }/>\n            ))\n          }\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'antd/dist/antd.css';//引入antd的样式文件\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react'\r\nimport Loadable from 'react-loadable'\r\n\r\n// 通过的过场组件\r\nconst loadingComponent = () => {\r\n  return (\r\n    <div>loading</div>\r\n  )\r\n}\r\n\r\n// 过场组件默认采用通用的组件，如果说传入了新的过场组件，那么我们就采用新的\r\nexport default (loader, loading = loadingComponent) => {\r\n  return Loadable ({\r\n    loader,\r\n    loading\r\n  })\r\n}"],"sourceRoot":""}